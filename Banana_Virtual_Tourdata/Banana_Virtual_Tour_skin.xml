<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19">

    
  <!-- Spot Style - Default Point Spot Style -->
  <style name="IconDefaultPointSpotStyle"
         url="%FIRSTXML%/spots/hotspot_neutral_user_defaultpoint0.png"
         visible="false"
         onhover="onhoverIconDefaultPointSpotStyle"
         onout="onoutIconDefaultPointSpotStyle"


         />

  <action name="onhoverIconDefaultPointSpotStyle">
    showtooltip('hotspot');
  </action>


  <action name="onoutIconDefaultPointSpotStyle">
    hideTooltip();



  </action>



  <!-- unsupported kind of display : PointMap -->


<!-- ********** -->
<!-- Urban Control Bar -->
<!-- id : controlBar_urban -->
<!-- ********** -->

  <krpano controlBar_urbanbarbuilt="false" controlBar_urbanbackgroundwidthwhenclosed="0" controlBar_urbanbackgroundwidthwhenopened="0" controlBar_urbanIsOpened="false" />
  <events name="controlBar_urbanbarevents" 
    onxmlcomplete="controlBar_urbanbuildMenuBar();" 

    openvideointerface="controlBar_urbanOpenVideoplayer();" 
    closevideointerface="controlBar_urbanCloseVideoplayer();" 

    keep="true" />



  <action name="controlBar_urbanbuildMenuBar">
    ifnot (controlBar_urbanbarbuilt, controlBar_urbanbuildMenu(); set(controlBar_urbanbarbuilt, true););
  </action>

  <style name="controlBar_urban_btn_style"
         keep="true"
         edge="right"
         align="right"
         x="0" y="0"
         height="40" width="40"
         crop="0|0|50|50"
         onovercrop="0|50|50|50"
         ondowncrop="0|100|50|50"
         onhover="showTooltip('plugin', controlBar_urbanmenuTooltipStyle, bottom);"
         onout="hideTooltip();"
         />
<style name="controlBar_urban_btn_style_off"
         keep="true"
         edge="right"
         align="right"
         x="0" y="0"
         height="40" width="40"
         onhover="showTooltip('plugin', controlBar_urbanmenuTooltipStyle, bottom);"
         onout="hideTooltip();"
         />

    <layer name="controlBar_urban_menu_bg"
            keep="true"
            type="container"
            zorder="1"
            width="40"
            height="40"
            align="bottom"
            x="0" y="10"
            maskchildren="true"
            rotate="0"
            visible="false"
            >
    <layer name="controlBar_urbanbtn_hide_hotspots"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_hide_show_hotspots.png"
            style="controlBar_urban_btn_style"
            onclick="hideHotspots();
"
            tooltip="controlBar_urbanhideSpotsTip"
            visible="false"
            />
    <layer name="controlBar_urbanbtn_show_hotspots"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_hide_show_hotspots.png"
            style="controlBar_urban_btn_style"
            onclick="showHotspots();
"
            tooltip="controlBar_urbanshowSpotsTip"
            visible="false"
            />


    <layer name="controlBar_urbanbtn_gyroscope_off"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_gyroscope.png"
            style="controlBar_urban_btn_style"
            onclick="disableGyroscope();
"
            devices="html5"
            tooltip="controlBar_urbangyroOffTip"
            visible="false"
            />
    <layer name="controlBar_urbanbtn_gyroscope_on"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_gyroscope.png"
            style="controlBar_urban_btn_style"
            onclick="enableGyroscope();
"
            devices="html5"
            tooltip="controlBar_urbangyroOnTip"
            visible="false"
            />
    <layer name="controlBar_urbanbtn_gyroscope_not"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_gyroscope_off.png"
            style="controlBar_urban_btn_style_off"
            enabled="true"
            capture="false"
            devices="html5"
            tooltip="controlBar_urbangyroNotTip"
            visible="false"
            />


    <layer name="controlBar_urbanbtn_ctrlmode_move_to"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_move_to.png"
            style="controlBar_urban_btn_style"
            tooltip="controlBar_urbanctrlmodeMoveTip"
            onclick="setControlModeMoveTo();
"
            visible="false"
            devices="desktop"
            />
    <layer name="controlBar_urbanbtn_ctrlmode_drag_to"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_drag_to.png"
            style="controlBar_urban_btn_style"
            tooltip="controlBar_urbanctrlmodeDragTip"
            onclick="setControlModeDragTo();
"
            visible="false"
            devices="desktop"
            />

    <layer name="controlBar_urbanbtn_in"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_zoom_in.png"
            ondown="viewControlZoomIn(false);"
            onup="viewControlZoomStop();
"
            style="controlBar_urban_btn_style"
            tooltip="controlBar_urbanzoomInTip"
            devices="desktop"
            visible="false"
            />
    <layer name="controlBar_urbanbtn_out"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_zoom_out.png"
            ondown="viewControlZoomOut(false);
"
            onup="viewControlZoomStop();
"
            style="controlBar_urban_btn_style"
            tooltip="controlBar_urbanzoomOutTip"
            devices="desktop"
            visible="false"
            />

    <layer name="controlBar_urbanbtn_home"
           url="%FIRSTXML%/graphics/urbancontrolbar/btn_home.png"
           style="controlBar_urban_btn_style"
           onclick="controlBar_urbanbtn_home_action();"
           tooltip="controlBar_urbanhomeTip"
           visible="false"
           />
    <layer name="controlBar_urbanbtn_left"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_move_left.png"
            ondown="viewControlMoveLeft(false);
"
            onup="viewControlMoveHoriStop();
"
            style="controlBar_urban_btn_style"
            tooltip="controlBar_urbanmoveLeftTip"
            devices="desktop"
            visible="false"
            />
    <layer name="controlBar_urbanbtn_right"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_move_right.png"
            ondown="viewControlMoveRight(false);
"
            onup="viewControlMoveHoriStop();
"
            style="controlBar_urban_btn_style"
            tooltip="controlBar_urbanmoveRightTip"
            devices="desktop"
            visible="false"
            />
    <layer name="controlBar_urbanbtn_up"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_move_up.png"
            ondown="viewControlMoveUp(false);
"
            onup="viewControlMoveVertStop();
"
            style="controlBar_urban_btn_style"
            tooltip="controlBar_urbanmoveUpTip"
            devices="desktop"
            visible="false"
            />
    <layer name="controlBar_urbanbtn_down"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_move_down.png"
            ondown="viewControlMoveDown(false);
"
            onup="viewControlMoveVertStop();
"
            style="controlBar_urban_btn_style"
            tooltip="controlBar_urbanmoveDownTip"
            devices="desktop"
            visible="false"
            x="0"
            y="0"
            />


    <layer name="controlBar_urbanbtn_sound_on"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_start_sound.png"
            onclick="playTourSounds();
"
            style="controlBar_urban_btn_style"
            visible="false"
            tooltip="controlBar_urbansoundsOnTip"
            />
    <layer name="controlBar_urbanbtn_sound_off"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_stop_sound.png"
            onclick="stopTourSounds();
"
            style="controlBar_urban_btn_style"
            visible="false"
            tooltip="controlBar_urbansoundsOffTip"
            />


    <layer name="controlBar_urbanbtn_prev_pano"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_previous_scene.png"
            onclick="loadPreviousScene();
"
            style="controlBar_urban_btn_style"
            tooltip="controlBar_urbanprevSceneTip"
            visible="false"
            />
    <layer name="controlBar_urbanbtn_next_pano"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_next_scene.png"
            onclick="loadNextScene();
"
            style="controlBar_urban_btn_style"
            tooltip="controlBar_urbannextSceneTip"
            visible="false"
            />

  <layer name="controlBar_urbanbtn_hide_thumbnails"
          url="%FIRSTXML%/graphics/urbancontrolbar/btn_hide_thumbnails.png"
          style="controlBar_urban_btn_style"
          onclick="hideTourThumbnails();
"
          tooltip="controlBar_urbanhideThumbnailsTip"
          visible="false"
          />
  <layer name="controlBar_urbanbtn_show_thumbnails"
          url="%FIRSTXML%/graphics/urbancontrolbar/btn_show_thumbnails.png"
          style="controlBar_urban_btn_style"
          onclick="showTourThumbnails();
"
          tooltip="controlBar_urbanshowThumbnailsTip"
          visible="false"
          />


    <layer name="controlBar_urbanbtn_display_map"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_map.png"
            onclick="controlBar_urbandisplayMap();"
            style="controlBar_urban_btn_style"
            visible="false"
            tooltip="controlBar_urbandisplayMapTip"
            />
    <layer name="controlBar_urbanbtn_hide_map"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_map.png"
            onclick="controlBar_urbanhideMap();"
            style="controlBar_urban_btn_style"
            visible="false"
            tooltip="controlBar_urbanhideMapTip"
            />

    <layer name="controlBar_urbanbtn_share"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_share.png"
            onclick="shareTour();
"
            style="controlBar_urban_btn_style"
            visible="false"
            tooltip="controlBar_urbanshareTip"
            />

    <layer name="controlBar_urbanbtn_enter_vr"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_vr_mode.png"
            onclick="js(accessWebVr(get(xml.scene)));
"
            style="controlBar_urban_btn_style"
            visible="false"
            devices="html5"
            tooltip="controlBar_urbanenterVRTip"
            />
    <layer name="controlBar_urbanbtn_enter_vr_not"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_vr_mode_off.png"
            style="controlBar_urban_btn_style"
            tooltip="controlBar_urbanenterVRNotTip"
            enabled="true"
            capture="false"
            visible="false"
            devices="html5"
            />


    <layer name="controlBar_urbanbtn_openfs"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_enter_fs.png"
            onclick="enterFullscreen();
"
            style="controlBar_urban_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="controlBar_urbanopenFsTip"
            />
    <layer name="controlBar_urbanbtn_closefs"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_close_fs.png"
            onclick="exitFullscreen();
"
            style="controlBar_urban_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="controlBar_urbancloseFsTip"
            />

    <layer name="controlBar_urbanbtn_autorotate_on"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_start_autorotation.png"
            onclick="resumeautorotation();
"
            style="controlBar_urban_btn_style"
            visible="false"
            tooltip="controlBar_urbanautorotateOnTip"
            />
    <layer name="controlBar_urbanbtn_autorotate_off"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_stop_autorotation.png"
            onclick="pauseautorotation();
"
            style="controlBar_urban_btn_style"
            visible="false"
            tooltip="controlBar_urbanautorotateOffTip"
            />


    <layer name="controlBar_urbanbtn_autotour_on"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_start_automatic_tour.png"
            onclick="startautotour();
"
            style="controlBar_urban_btn_style"
            visible="false"
            tooltip="controlBar_urbanautotourOnTip"
            />
    <layer name="controlBar_urbanbtn_autotour_off"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_stop_automatic_tour.png"
            onclick="stopautotour();
"
            style="controlBar_urban_btn_style"
            visible="false"
            tooltip="controlBar_urbanautotourOffTip"
            />

    <layer name="controlBar_urbanbtn_play_video"
           url="%FIRSTXML%/graphics/urbancontrolbar/btn_start_videoplayer.png"
           onclick="videointerface_togglepause();"
           style="controlBar_urban_btn_style"
           visible="false"
           tooltip="controlBar_urbanplayVideoTip"
           />
    <layer name="controlBar_urbanbtn_pause_video"
           url="%FIRSTXML%/graphics/urbancontrolbar/btn_pause_videoplayer.png"
           onclick="videointerface_togglepause();"
           style="controlBar_urban_btn_style"
           visible="false"
           tooltip="controlBar_urbanpauseVideoTip"
           />


    <layer name="controlBar_urbanbtn_display_help"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_help.png"
            onclick="controlBar_urbandisplayHelp();"
            style="controlBar_urban_btn_style"
            devices="desktop"
            visible="false"
            tooltip="controlBar_urbandisplayHelpTip"
            />
    <layer name="controlBar_urbanbtn_close_help"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_help.png"
            onclick="controlBar_urbancloseHelp();"
            style="controlBar_urban_btn_style"
            visible="false"
            devices="desktop"
            tooltip="controlBar_urbanhideHelpTip"
            />


    <layer name="controlBar_urbanbtn_display_info"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_info.png"
            onclick="showTourInfo();
"
            style="controlBar_urban_btn_style"
            visible="false"
            tooltip="controlBar_urbandisplayInfoTip"
            />

    <layer name="controlBar_urbanbtn_close_info"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_info.png"
            onclick="hideTourInfo();
"
            style="controlBar_urban_btn_style"
            visible="false"
            tooltip="controlBar_urbanhideInfoTip"
            />


    <layer name="controlBar_urbanbtn_hidecontrols"
           url="%FIRSTXML%/graphics/urbancontrolbar/btn_hide_controls.png"
           style="controlBar_urban_btn_style"
           onclick="controlBar_urbanhideMenuControls();hideTourControls();
"
           visible="false"
           tooltip="controlBar_urbanhideControlsTip"
           />
    <layer name="controlBar_urbanbtn_showcontrols"
           url="%FIRSTXML%/graphics/urbancontrolbar/btn_show_controls.png"
           style="controlBar_urban_btn_style"
           onclick="controlBar_urbanshowMenuControls();showTourControls();
"
           tooltip="controlBar_urbandisplayControlsTip"
           visible="false"
           />
 </layer>

  <action name="controlBar_urbanbtn_home_action">
    hideTooltip();lookto(get(panoview.h),get(panoview.v),get(panoview.fov),smooth(100,20,50));
    if(scene[get(xml.scene)].video,
      plugin[get(videointerface_video)].seek(0);
      ifnot(plugin[get(videointerface_video)].ispaused,
        plugin[get(videointerface_video)].play();
      );
    );
  </action>


<events name="controlBar_urbanvravailableevent"
		onvravailable="controlBar_urbanupdateVrButtonsAvailability();"
		onvrunavailable="controlBar_urbanupdateVrButtonsAvailability();"
		keep="true" devices="html5" />
	<krpano controlBar_urbanmenuvravailable="false" />
	<action name="controlBar_urbanupdateVrButtonsAvailability">
		if (tour_vrdevices,
			set(controlBar_urbanmenuvravailable, true);
		,
			set(controlBar_urbanmenuvravailable, false);
		);
		controlBar_urbanupdateVrButtons();
	</action>
	<action name="controlBar_urbanHideVrButtons">
		set(layer[controlBar_urbanbtn_enter_vr].visible, false);
		if('%1' == 'true' AND plugin[ptpvrmode],
			set(layer[controlBar_urbanbtn_enter_vr_not].visible, true);
		,
			set(layer[controlBar_urbanbtn_enter_vr_not].visible, false);
		);
	</action>
	<action name="controlBar_urbanShowVrButtons">
		if (controlBar_urbanmenuvravailable,
			set(layer[controlBar_urbanbtn_enter_vr].visible, true);
			set(layer[controlBar_urbanbtn_enter_vr_not].visible, false);
		,
			controlBar_urbanHideVrButtons(true);
		);
	</action>
	<action name="controlBar_urbanupdateVrButtons">
	if (tour_vrdevices,
		if (controlBar_urbanIsOpened,
			controlBar_urbanShowVrButtons();
		,
			controlBar_urbanHideVrButtons();
		);
	,
		if (controlBar_urbanIsOpened,
			controlBar_urbanHideVrButtons(true);
		,
			controlBar_urbanHideVrButtons();
		);
	);
	</action>

  <events name="controlBar_urbangyroscopeavailableevent"
          ongyroscopeavailable="controlBar_urbanupdateGyroscopeButtonsAvailability();"
          ongyroscopeunavailable="controlBar_urbanupdateGyroscopeButtonsAvailability();"
          ongyroscopeon="controlBar_urbanenableGyroscopeButtons(true);"
          ongyroscopeoff="controlBar_urbanenableGyroscopeButtons(false);"
          keep="true" devices="html5" />
  <krpano controlBar_urbanmenugyroscopeavailable="false" controlBar_urbanmenugyroscopeenabled="false"/>
  <action name="controlBar_urbanupdateGyroscopeButtonsAvailability">
    if (tour_gyroscopedevices,
      set(controlBar_urbanmenugyroscopeavailable, true);
      controlBar_urbanupdateGyroscopeButtons();
    ,
      set(controlBar_urbanmenugyroscopeavailable, false);
      controlBar_urbanupdateGyroscopeButtons();
    );
  </action>
  <action name="controlBar_urbanenableGyroscopeButtons">
    if (tour_gyroscopedevices,
      set(controlBar_urbanmenugyroscopeenabled, %1);
      controlBar_urbanupdateGyroscopeButtons();
    );
  </action>
	<action name="controlBar_urbanHideGyroscopeButtons">
		set(layer[controlBar_urbanbtn_gyroscope_off].visible, false);
		set(layer[controlBar_urbanbtn_gyroscope_on].visible, false);
		if('%1' == 'true' AND plugin[gyroscope],
			set(layer[controlBar_urbanbtn_gyroscope_not].visible, true);
		,
			set(layer[controlBar_urbanbtn_gyroscope_not].visible, false);
		);
	</action>
	<action name="controlBar_urbanShowGyroscopeButtons">
		if (controlBar_urbanmenugyroscopeavailable,
			if (controlBar_urbanmenugyroscopeenabled,
				set(layer[controlBar_urbanbtn_gyroscope_off].visible, true);
				set(layer[controlBar_urbanbtn_gyroscope_on].visible, false);
			,
				set(layer[controlBar_urbanbtn_gyroscope_off].visible, false);
				set(layer[controlBar_urbanbtn_gyroscope_on].visible, true);
			);
			set(layer[controlBar_urbanbtn_gyroscope_not].visible, false);
		,
			controlBar_urbanHideGyroscopeButtons(true);
		);
	</action>
	<action name="controlBar_urbanupdateGyroscopeButtons">
	if (tour_gyroscopedevices,
		if (controlBar_urbanIsOpened,
			controlBar_urbanShowGyroscopeButtons();
		,
			controlBar_urbanHideGyroscopeButtons();
		);
	,
		if (controlBar_urbanIsOpened,
			controlBar_urbanHideGyroscopeButtons(true);
		,
			controlBar_urbanHideGyroscopeButtons();
		);
	);
	</action>


  <events name="controlBar_urbancontrolmodechangedevent" oncontrolmodechanged="controlBar_urbanupdateControlModeButtons();" keep="true"/>
	<action name="controlBar_urbanHideControlModeButtons">
		set(layer[controlBar_urbanbtn_ctrlmode_move_to].visible, false);
		set(layer[controlBar_urbanbtn_ctrlmode_drag_to].visible, false);
	</action>
	<action name="controlBar_urbanShowControlModeButtons">
		if (tour_controlmodemousetype == "moveto",
			set(layer[controlBar_urbanbtn_ctrlmode_drag_to].visible, true);
			set(layer[controlBar_urbanbtn_ctrlmode_move_to].visible, false);
		,
			set(layer[controlBar_urbanbtn_ctrlmode_move_to].visible, true);
			set(layer[controlBar_urbanbtn_ctrlmode_drag_to].visible, false);
		);
	</action>
	<action name="controlBar_urbanupdateControlModeButtons">
	if (device.desktop,
		if (controlBar_urbanIsOpened,
			controlBar_urbanShowControlModeButtons();
		,
			controlBar_urbanHideControlModeButtons();
		);
	,
		controlBar_urbanHideControlModeButtons();
	);
	</action>

  <events name="controlBar_urbanhideshowthumbnailsevent" hidetourthumbnails="controlBar_urbanupdateHideShowThumbnailsButtons();" showtourthumbnails="controlBar_urbanupdateHideShowThumbnailsButtons();" keep="true"/>
	<action name="controlBar_urbanHideHideShowThumbnailsButtons">
		set(layer[controlBar_urbanbtn_show_thumbnails].visible, false);
		set(layer[controlBar_urbanbtn_hide_thumbnails].visible, false);
	</action>
	<action name="controlBar_urbanShowHideShowThumbnailsButtons">
		if (tour_displaythumbnails,
			set(layer[controlBar_urbanbtn_hide_thumbnails].visible, true);
			set(layer[controlBar_urbanbtn_show_thumbnails].visible, false);
		,
			set(layer[controlBar_urbanbtn_show_thumbnails].visible, true);
			set(layer[controlBar_urbanbtn_hide_thumbnails].visible, false);
		);
	</action>
	<action name="controlBar_urbanupdateHideShowThumbnailsButtons">
		if (controlBar_urbanIsOpened,
			controlBar_urbanShowHideShowThumbnailsButtons();
		,
			controlBar_urbanHideHideShowThumbnailsButtons();
		);
	</action>


  <action name="controlBar_urbanhideMenuControls">
    set(controlBar_urbanIsOpened, false);
    set(layer[controlBar_urbanbtn_hidecontrols].visible, false);
    set(layer[controlBar_urbanbtn_showcontrols].visible, true);
if (scene.count GT 1,
	set(layer[controlBar_urbanbtn_next_pano].visible, false);
	set(layer[controlBar_urbanbtn_prev_pano].visible, false);
);

set(layer[controlBar_urbanbtn_share].visible, false);
controlBar_urbanupdateVrButtons();

set(layer[controlBar_urbanbtn_home].visible, false);
if (device.desktop,
	set(layer[controlBar_urbanbtn_in].visible, false);
	set(layer[controlBar_urbanbtn_out].visible, false);
);
if (device.desktop,
	set(layer[controlBar_urbanbtn_up].visible, false);
	set(layer[controlBar_urbanbtn_down].visible, false);
);
if (device.desktop,
	set(layer[controlBar_urbanbtn_left].visible, false);
	set(layer[controlBar_urbanbtn_right].visible, false);
);
	controlBar_urbanupdateFullscreenButtons();
	controlBar_urbanupdateHelpButtons();

	controlBar_urbanupdateInfoButtons();

	controlBar_urbanupdateAutorotationButtons();

	controlBar_urbanupdateAutotourButtons();
	controlBar_urbanupdateHideShowVideoplayerButtons();
	controlBar_urbanupdateSoundButtons();
	controlBar_urbanupdateGyroscopeButtons();

	controlBar_urbanupdateControlModeButtons();
	controlBar_urbanupdateHideShowHotspotsButtons();

	controlBar_urbanupdateMapButtons();

	controlBar_urbanupdateHideShowThumbnailsButtons();

  set(layer[controlBar_urban_menu_bg].width, get(controlBar_urbanbackgroundwidthwhenclosed));

  set(layer[controlBar_urban_menu_bg].visible, true);
  </action>
  <action name="controlBar_urbanshowMenuControls">
    set(controlBar_urbanIsOpened, true);
    set(layer[controlBar_urbanbtn_hidecontrols].visible, true);
    set(layer[controlBar_urbanbtn_showcontrols].visible, false);
	set(layer[controlBar_urban_menu_bg].visible, true);
if (scene.count GT 1,
	set(layer[controlBar_urbanbtn_next_pano].visible, true);
	set(layer[controlBar_urbanbtn_prev_pano].visible, true);
);

set(layer[controlBar_urbanbtn_share].visible, true);
controlBar_urbanupdateVrButtons();

set(layer[controlBar_urbanbtn_home].visible, true);
if (device.desktop,
	set(layer[controlBar_urbanbtn_in].visible, true);
	set(layer[controlBar_urbanbtn_out].visible, true);
);
if (device.desktop,
	set(layer[controlBar_urbanbtn_up].visible, true);
	set(layer[controlBar_urbanbtn_down].visible, true);
);
if (device.desktop,
	set(layer[controlBar_urbanbtn_left].visible, true);
	set(layer[controlBar_urbanbtn_right].visible, true);
);
	controlBar_urbanupdateFullscreenButtons();
	controlBar_urbanupdateHelpButtons();

	controlBar_urbanupdateInfoButtons();

	controlBar_urbanupdateAutorotationButtons();

	controlBar_urbanupdateAutotourButtons();
	controlBar_urbanupdateHideShowVideoplayerButtons();
	controlBar_urbanupdateSoundButtons();
	controlBar_urbanupdateGyroscopeButtons();

	controlBar_urbanupdateControlModeButtons();
	controlBar_urbanupdateHideShowHotspotsButtons();

	controlBar_urbanupdateMapButtons();

	controlBar_urbanupdateHideShowThumbnailsButtons();

    set(layer[controlBar_urban_menu_bg].width, get(controlBar_urbanbackgroundwidthwhenopened));
  </action>

	<layer name="controlBar_urbanhelpScreenBg" align="center" keep="true" onclick="controlBar_urbancloseHelp();" url="%FIRSTXML%/graphics/urbancontrolbar/help_screen_bg.png" visible="false" rotate="-25" height="50%" width="prop" zorder="97">
		<layer name="controlBar_urbanhelpScreenShadow" align="center" keep="true" onclick="controlBar_urbancloseHelp();" url="%FIRSTXML%/graphics/urbancontrolbar/help_screen_shadow.png"   rotate="12"  height="100%" width="prop" x="0" zorder="0" blendmode="multiply"/>
		<layer name="controlBar_urbanhelpScreenMouse" align="center" keep="true" onclick="controlBar_urbancloseHelp();" url="%FIRSTXML%/graphics/urbancontrolbar/help_screen_mouse.png" rotate="25"  height="100%" width="prop" x="0" zorder="1">
			<layer name="controlBar_urbanhelpScreenKeyboard" align="center" keep="true" onclick="controlBar_urbancloseHelp();" url="%FIRSTXML%/graphics/urbancontrolbar/help_screen_keyboard.png" rotate="-25" height="100%" width="prop" x="0">
				<layer name="controlBar_urbanhelpScreenFg" align="center" keep="true" onclick="controlBar_urbancloseHelp();" url="%FIRSTXML%/graphics/urbancontrolbar/help_screen_outline.png" rotate="45" height="100%" width="prop" x="0" onover="tween(rotate, 0, 0.2)" onout="tween(rotate, 2, 0.2)" displayed="false" />
			</layer>
		</layer>
	</layer>

	<action name="controlBar_urbandisplayHelp">
	if (device.desktop,
		set(layer[controlBar_urbanhelpScreenFg].displayed, true);
		set(layer[controlBar_urbanhelpScreenBg].visible, true);
		set(layer[controlBar_urbanhelpScreenShadow].visible, true);
		set(layer[controlBar_urbanhelpScreenMouse].visible, true);
		set(layer[controlBar_urbanhelpScreenKeyboard].visible, true);
		set(layer[controlBar_urbanhelpScreenFg].visible , true);
		tween(layer[controlBar_urbanhelpScreenBg].rotate, 0, 1);
		tween(layer[controlBar_urbanhelpScreenShadow].rotate, 0, 1);
		tween(layer[controlBar_urbanhelpScreenMouse].rotate, 0, 1);
		tween(layer[controlBar_urbanhelpScreenKeyboard].rotate, 0, 1);
		tween(layer[controlBar_urbanhelpScreenFg].rotate, 2, 1);
		controlBar_urbanupdateHelpButtons();
	);
	</action>
	<action name="controlBar_urbancloseHelp">
	if (device.desktop,
		set(layer[controlBar_urbanhelpScreenFg].displayed, false);
		tween(layer[controlBar_urbanhelpScreenKeyboard].rotate, -25, 1, easeOutQuad, set(layer[controlBar_urbanhelpScreenKeyboard].visible,false););
		tween(layer[controlBar_urbanhelpScreenMouse].rotate, 25, 1, easeOutQuad, set(layer[controlBar_urbanhelpScreenMouse].visible,false););
		tween(layer[controlBar_urbanhelpScreenShadow].rotate, 12, 1, easeOutQuad, set(layer[controlBar_urbanhelpScreenShadow].visible,false););
		tween(layer[controlBar_urbanhelpScreenBg].rotate, -25, 1, easeOutQuad, set(layer[controlBar_urbanhelpScreenBg].visible,false););
		tween(layer[controlBar_urbanhelpScreenFg].rotate, 45, 1, easeOutQuad, set(layer[controlBar_urbanhelpScreenFg].visible,false););
		controlBar_urbanupdateHelpButtons();
	);
	</action>
	<action name="controlBar_urbanHideHelpButtons">
		set(layer[controlBar_urbanbtn_display_help].visible, false);
		set(layer[controlBar_urbanbtn_close_help].visible, false);
	</action>
	<action name="controlBar_urbanShowHelpButtons">
		if (layer[controlBar_urbanhelpScreenFg].displayed,
			set(layer[controlBar_urbanbtn_close_help].visible, true);
			set(layer[controlBar_urbanbtn_display_help].visible, false);
		,
			set(layer[controlBar_urbanbtn_display_help].visible, true);
			set(layer[controlBar_urbanbtn_close_help].visible, false);
		);
	</action>
	<action name="controlBar_urbanupdateHelpButtons">
	if (device.desktop,
		if (controlBar_urbanIsOpened,
			controlBar_urbanShowHelpButtons();
		,
			controlBar_urbanHideHelpButtons();
		);
	,
		controlBar_urbanHideHelpButtons();
	);
	</action>


	<events name="controlBar_urbanhideshowinfoevent" 
		onhidetourinfo="controlBar_urbanupdateInfoButtons();" 
		onshowtourinfo="controlBar_urbanupdateInfoButtons();" 
		keep="true" />
	<action name="controlBar_urbanHideInfoButtons">
		set(layer[controlBar_urbanbtn_display_info].visible, false);
		set(layer[controlBar_urbanbtn_close_info].visible, false);
	</action>
	<action name="controlBar_urbanShowInfoButtons">
		if (tour_displayinfo,
			set(layer[controlBar_urbanbtn_close_info].visible, true);
			set(layer[controlBar_urbanbtn_display_info].visible, false);
		,
			set(layer[controlBar_urbanbtn_display_info].visible, true);
			set(layer[controlBar_urbanbtn_close_info].visible, false);
		);
	</action>
	<action name="controlBar_urbanupdateInfoButtons">
		if (controlBar_urbanIsOpened,
			controlBar_urbanShowInfoButtons();
		,
			controlBar_urbanHideInfoButtons();
		);
	</action>

  <action name="controlBar_urbandisplayMap">showMap();

  </action>
  <action name="controlBar_urbanhideMap">hideMap();

  </action>
  
  <events name="controlBar_urbandisplaymapchangeevent"
          onshowtourmap="controlBar_urbanupdateMapButtons();"
          onhidetourmap="controlBar_urbanupdateMapButtons();"
          keep="true"/>
	<action name="controlBar_urbanHideMapButtons">
		set(layer[controlBar_urbanbtn_display_map].visible, false);
		set(layer[controlBar_urbanbtn_hide_map].visible, false);
	</action>
	<action name="controlBar_urbanShowMapButtons">
		if (tour_displaymap,
			set(layer[controlBar_urbanbtn_hide_map].visible, true);
			set(layer[controlBar_urbanbtn_display_map].visible, false);
		,
			set(layer[controlBar_urbanbtn_display_map].visible, true);
			set(layer[controlBar_urbanbtn_hide_map].visible, false);
		);
	</action>
	<action name="controlBar_urbanupdateMapButtons">
		if (controlBar_urbanIsOpened,
			controlBar_urbanShowMapButtons();
		,
			controlBar_urbanHideMapButtons();
		);
	</action>


  <events name="controlBar_urbanmenufullscreenchangeevent"
          onenterfullscreen="controlBar_urbanupdateFullscreenButtons();"
          onexitfullscreen="controlBar_urbanupdateFullscreenButtons();"
          keep="true"/>
	<action name="controlBar_urbanHideFullscreenButtons">
		set(layer[controlBar_urbanbtn_openfs].visible , false);
		set(layer[controlBar_urbanbtn_closefs].visible, false);
	</action>
	<action name="controlBar_urbanShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[controlBar_urbanbtn_openfs].visible , false);
				set(layer[controlBar_urbanbtn_closefs].visible, true);
			,
				set(layer[controlBar_urbanbtn_openfs].visible ,true);
				set(layer[controlBar_urbanbtn_closefs].visible,false);
			);
		,
			controlBar_urbanHideFullscreenButtons();
		);
	</action>
	<action name="controlBar_urbanupdateFullscreenButtons">
		if (controlBar_urbanIsOpened,
			controlBar_urbanShowFullscreenButtons();
		,
			controlBar_urbanHideFullscreenButtons();
		);
	</action>

	<events name="controlBar_urbanAutorotationEvents"
		onstartautorotation="controlBar_urbanupdateAutorotationButtons();"
		onresumeautorotation="controlBar_urbanupdateAutorotationButtons();"
		onstopautorotation="controlBar_urbanupdateAutorotationButtons();"
		onpauseautorotation="controlBar_urbanupdateAutorotationButtons();"
		keep="true"/>
	<action name="controlBar_urbanHideAutorotationButtons">
		set(layer[controlBar_urbanbtn_autorotate_off].visible, false);
		set(layer[controlBar_urbanbtn_autorotate_on].visible , false);
	</action>
	<action name="controlBar_urbanShowAutorotationButtons">
		if(autorotate.enabled == false,
			set(layer[controlBar_urbanbtn_autorotate_off].visible, false);
			set(layer[controlBar_urbanbtn_autorotate_on].visible , true);
		,
			set(layer[controlBar_urbanbtn_autorotate_off].visible, true);
			set(layer[controlBar_urbanbtn_autorotate_on].visible , false);
		);
	</action>
	<action name="controlBar_urbanupdateAutorotationButtons">
		if (controlBar_urbanIsOpened,
			controlBar_urbanShowAutorotationButtons();
		,
			controlBar_urbanHideAutorotationButtons();
		);
	</action>


    <events name="controlBar_urbanhideshowvideoplayerevent" onplayvideointerface="controlBar_urbanupdateHideShowVideoplayerButtons();" onpausevideointerface="controlBar_urbanupdateHideShowVideoplayerButtons();" keep="true"/>
    <action name="controlBar_urbanHideHideShowVideoplayerButtons">
      if(controlBar_urbanbackgroundwidthwhenopened GT 0,
        if(%1,
          set(layer[controlBar_urban_menu_bg].width, get(controlBar_urbanbackgroundwidthwhenopenedwithoutvideo));
        ,
          tween(layer[controlBar_urban_menu_bg].width,get(controlBar_urbanbackgroundwidthwhenopenedwithoutvideo),0.5,easeOutQuad);
        );
      ,
        set(layer[controlBar_urban_menu_bg].width, get(controlBar_urbanbackgroundwidthwhenopenedwithoutvideo));
      );
      set(layer[controlBar_urbanbtn_play_video].visible, false);
      set(layer[controlBar_urbanbtn_pause_video].visible, false);
    </action>
    <action name="controlBar_urbanShowHideShowVideoplayerButtons">
      if(controlBar_urban_use_videoplayer_interface,
        if (plugin[get(videointerface_video)],
        if (plugin[get(videointerface_video)].ispaused,
          if(controlBar_urbanbackgroundwidthwhenopened GT 0,
            tween(layer[controlBar_urban_menu_bg].width, get(controlBar_urbanbackgroundwidthwhenopened));
          ,
            set(layer[controlBar_urban_menu_bg].width, get(controlBar_urbanbackgroundwidthwhenopenedwithoutvideo));
          );
          set(layer[controlBar_urbanbtn_play_video].visible, true);
          set(layer[controlBar_urbanbtn_pause_video].visible, false);
        ,
          if(controlBar_urbanbackgroundwidthwhenopened GT 0,
            tween(layer[controlBar_urban_menu_bg].width, get(controlBar_urbanbackgroundwidthwhenopened));
          ,
            set(layer[controlBar_urban_menu_bg].width, get(controlBar_urbanbackgroundwidthwhenopenedwithoutvideo));
          );
          set(layer[controlBar_urbanbtn_play_video].visible, false);
          set(layer[controlBar_urbanbtn_pause_video].visible, true);
        ););
      ,
        controlBar_urbanHideHideShowVideoplayerButtons();
      );
    </action>
    <action name="controlBar_urbanupdateHideShowVideoplayerButtons">
      if (controlBar_urbanIsOpened,
        controlBar_urbanShowHideShowVideoplayerButtons();
      ,
        controlBar_urbanHideHideShowVideoplayerButtons(true);
      );
    </action>
    
	<events name="controlBar_urbanAutotourEvents"
		onstartautotour="controlBar_urbanupdateAutotourButtons();"
		onstopautotour="controlBar_urbanupdateAutotourButtons();"
		keep="true"/>
	<action name="controlBar_urbanHideAutotourButtons">
		set(layer[controlBar_urbanbtn_autotour_off].visible, false);
		set(layer[controlBar_urbanbtn_autotour_on].visible , false);
	</action>
	<action name="controlBar_urbanShowAutotourButtons">
		if (tour_autotourenabled == false,
			set(layer[controlBar_urbanbtn_autotour_off].visible, false);
			set(layer[controlBar_urbanbtn_autotour_on].visible , true);
		,
			set(layer[controlBar_urbanbtn_autotour_off].visible, true);
			set(layer[controlBar_urbanbtn_autotour_on].visible , false);
		);
	</action>
	<action name="controlBar_urbanupdateAutotourButtons">
		if (controlBar_urbanIsOpened,
			controlBar_urbanShowAutotourButtons();
		,
			controlBar_urbanHideAutotourButtons();
		);
	</action>

  <events name="controlBar_urbanplaystopsoundsevent" playtoursoundsevent="controlBar_urbanupdateSoundButtons();" stoptoursoundsevent="controlBar_urbanupdateSoundButtons();" keep="true"/>
	<action name="controlBar_urbanHideSoundButtons">
		set(layer[controlBar_urbanbtn_sound_off].visible, false);
		set(layer[controlBar_urbanbtn_sound_on].visible , false);
	</action>
	<action name="controlBar_urbanShowSoundButtons">
		if (tour_soundson == false,
			set(layer[controlBar_urbanbtn_sound_off].visible, false);
			set(layer[controlBar_urbanbtn_sound_on].visible , true);
		,
			set(layer[controlBar_urbanbtn_sound_off].visible, true);
			set(layer[controlBar_urbanbtn_sound_on].visible , false);
		);
	</action>
	<action name="controlBar_urbanupdateSoundButtons">
		if (controlBar_urbanIsOpened,
			controlBar_urbanShowSoundButtons();
		,
			controlBar_urbanHideSoundButtons();
		);
	</action>


  <events name="controlBar_urbanhotspotsdisplayevents"
          hotspots_visibility_changed="controlBar_urbanupdateHideShowHotspotsButtons"
          keep="true"/>
	<action name="controlBar_urbanHideHideShowHotspotsButtons">
		set(layer[controlBar_urbanbtn_show_hotspots].visible, false);
		set(layer[controlBar_urbanbtn_hide_hotspots].visible, false);
	</action>
	<action name="controlBar_urbanShowHideShowHotspotsButtons">
		if (tour_displayspots,
			set(layer[controlBar_urbanbtn_hide_hotspots].visible, true);
			set(layer[controlBar_urbanbtn_show_hotspots].visible, false);
		,
			set(layer[controlBar_urbanbtn_show_hotspots].visible, true);
			set(layer[controlBar_urbanbtn_hide_hotspots].visible, false);
		);
	</action>
	<action name="controlBar_urbanupdateHideShowHotspotsButtons">
		if (controlBar_urbanIsOpened,
			controlBar_urbanShowHideShowHotspotsButtons();
		,
			controlBar_urbanHideHideShowHotspotsButtons();
		);
	</action>

<layer name="controlBar_urbanmenuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	type="text"
	align="center"
	bg="false"
	bgborder="0"
	css="color:#ffffff;font-family:Helvetica;font-weight:bold;font-size:14px;text-align:left;"
	padding="2"
	xoffset="0"
	yoffset="0"
	interactivecontent="false"
	zorder="0"
	visible="false"
	html=""
	edge="bottom"
/>

  <action name="controlBar_urbanbuildMenu">
    
    set(controlBar_urbanbutton_pos, 0);

	set(controlBar_urbanbackgroundwidthwhenclosed, 40);
    set(layer[controlBar_urbanbtn_hidecontrols].x, get(controlBar_urbanbutton_pos));
    set(layer[controlBar_urbanbtn_showcontrols].x, get(controlBar_urbanbutton_pos));
    inc(controlBar_urbanbutton_pos, 45);


    set(layer[controlBar_urbanbtn_display_info].x, get(controlBar_urbanbutton_pos));
    set(layer[controlBar_urbanbtn_close_info].x  , get(controlBar_urbanbutton_pos));
    inc(controlBar_urbanbutton_pos, 45);


      if (device.desktop,
        set(layer[controlBar_urbanbtn_display_help].x, get(controlBar_urbanbutton_pos));
        set(layer[controlBar_urbanbtn_close_help].x  , get(controlBar_urbanbutton_pos));
        inc(controlBar_urbanbutton_pos, 45);
      );

      if (device.fullscreensupport,
        set(layer[controlBar_urbanbtn_openfs].x , get(controlBar_urbanbutton_pos));
        set(layer[controlBar_urbanbtn_closefs].x, get(controlBar_urbanbutton_pos));
        inc(controlBar_urbanbutton_pos, 45);
      );


      set(layer[controlBar_urbanbtn_share].x, get(controlBar_urbanbutton_pos));
      inc(controlBar_urbanbutton_pos, 45);

      set(layer[controlBar_urbanbtn_display_map].x , get(controlBar_urbanbutton_pos));
      set(layer[controlBar_urbanbtn_hide_map].x    , get(controlBar_urbanbutton_pos));
      inc(controlBar_urbanbutton_pos, 45);


      set(layer[controlBar_urbanbtn_autorotate_on].x , get(controlBar_urbanbutton_pos));
      set(layer[controlBar_urbanbtn_autorotate_off].x, get(controlBar_urbanbutton_pos));
      inc(controlBar_urbanbutton_pos, 45);


      set(layer[controlBar_urbanbtn_autotour_on].x , get(controlBar_urbanbutton_pos));
      set(layer[controlBar_urbanbtn_autotour_off].x, get(controlBar_urbanbutton_pos));
      inc(controlBar_urbanbutton_pos, 45);

      set(layer[controlBar_urbanbtn_sound_on].x , get(controlBar_urbanbutton_pos));
      set(layer[controlBar_urbanbtn_sound_off].x, get(controlBar_urbanbutton_pos));
      inc(controlBar_urbanbutton_pos, 45);


      set(layer[controlBar_urbanbtn_show_thumbnails].x, get(controlBar_urbanbutton_pos));
      set(layer[controlBar_urbanbtn_hide_thumbnails].x, get(controlBar_urbanbutton_pos));
      inc(controlBar_urbanbutton_pos, 45);

    if (device.desktop,
      set(layer[controlBar_urbanbtn_ctrlmode_drag_to].x, get(controlBar_urbanbutton_pos));
      set(layer[controlBar_urbanbtn_ctrlmode_move_to].x, get(controlBar_urbanbutton_pos));
      inc(controlBar_urbanbutton_pos, 45);
    );


    if(plugin[ptpvrmode] AND device.html5,
      set(layer[controlBar_urbanbtn_enter_vr].x, get(controlBar_urbanbutton_pos));
      set(layer[controlBar_urbanbtn_enter_vr_not].x, get(controlBar_urbanbutton_pos));
      inc(controlBar_urbanbutton_pos, 45);
    );

        set(layer[controlBar_urbanbtn_show_hotspots].x, get(controlBar_urbanbutton_pos));
        set(layer[controlBar_urbanbtn_hide_hotspots].x, get(controlBar_urbanbutton_pos));
        inc(controlBar_urbanbutton_pos, 45);


      if(plugin[gyroscope],
        set(controlBar_urbanDisplayGyroscopeButton, false);
        if (device.tablet, set(controlBar_urbanDisplayGyroscopeButton, true););
        if (device.mobile, set(controlBar_urbanDisplayGyroscopeButton, true););
        if(controlBar_urbanDisplayGyroscopeButton,
          set(layer[controlBar_urbanbtn_gyroscope_on].x , get(controlBar_urbanbutton_pos));
          set(layer[controlBar_urbanbtn_gyroscope_off].x, get(controlBar_urbanbutton_pos));
          set(layer[controlBar_urbanbtn_gyroscope_not].x, get(controlBar_urbanbutton_pos));
          inc(controlBar_urbanbutton_pos, 45);
        );
      );


        set(layer[controlBar_urbanbtn_home].x, get(controlBar_urbanbutton_pos));
        inc(controlBar_urbanbutton_pos, 45);

      if (device.desktop,
        set(layer[controlBar_urbanbtn_right].x, get(controlBar_urbanbutton_pos));
        inc(controlBar_urbanbutton_pos, 45);
        set(layer[controlBar_urbanbtn_left].x, get(controlBar_urbanbutton_pos));
        inc(controlBar_urbanbutton_pos, 45);
      );

      if (device.desktop,
        set(layer[controlBar_urbanbtn_down].x, get(controlBar_urbanbutton_pos));
        inc(controlBar_urbanbutton_pos, 45);
        set(layer[controlBar_urbanbtn_up].x, get(controlBar_urbanbutton_pos));
        inc(controlBar_urbanbutton_pos, 45);
      );
      if (device.desktop,
        set(layer[controlBar_urbanbtn_out].x, get(controlBar_urbanbutton_pos));
        inc(controlBar_urbanbutton_pos, 45);
        set(layer[controlBar_urbanbtn_in].x, get(controlBar_urbanbutton_pos));
        inc(controlBar_urbanbutton_pos, 45);
      );

      if (scene.count GT 1,
        set(layer[controlBar_urbanbtn_next_pano].x, get(controlBar_urbanbutton_pos));
        inc(controlBar_urbanbutton_pos, 45);
        set(layer[controlBar_urbanbtn_prev_pano].x, get(controlBar_urbanbutton_pos));
        inc(controlBar_urbanbutton_pos, 45);
      );


    set(layer[controlBar_urbanbtn_play_video].x, get(controlBar_urbanbutton_pos));
    set(layer[controlBar_urbanbtn_pause_video].x, get(controlBar_urbanbutton_pos));
    inc(controlBar_urbanbutton_pos, 45);

      dec(controlBar_urbanbutton_pos, 5);

      set(controlBar_urbanbackgroundwidthwhenopened, get(controlBar_urbanbutton_pos));

      sub(controlBar_urbanbackgroundwidthwhenopenedwithoutvideo, controlBar_urbanbackgroundwidthwhenopened, 45);

      set(layer[controlBar_urban_menu_bg].width, get(controlBar_urbanbackgroundwidthwhenopened));
	
	

    </action>

	<events name="controlBar_urbanStartTourEvents" onTourStart="controlBar_urbanCallOnStartTour();" keep="true" />
	
	<action name="controlBar_urbanCallOnStartTour">
		
		controlBar_urbanshowMenuControls();
	</action>

	<action name="controlBar_urbanOpenVideoplayer">
		set(controlBar_urban_use_videoplayer_interface, true);
		
		controlBar_urbanupdateHideShowVideoplayerButtons();
	</action>
	<action name="controlBar_urbanCloseVideoplayer">
		set(controlBar_urban_use_videoplayer_interface, false);
		
		controlBar_urbanupdateHideShowVideoplayerButtons();
	</action>



  <!-- MAP -->
  <action name="hideMap">set(tour_displaymap, false);events.dispatch(onhidetourmap);</action>
  <action name="showMap">set(tour_displaymap, true); events.dispatch(onshowtourmap);</action>

  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);set(fullscreen,false);</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);set(fullscreen,true);</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>

<action name="viewControlMoveUp">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(isfullvertical == false AND calc(view.vlookat-%2) LT view.vlookatmin,
				moveto(get(view.hlookat), get(view.vlookatmin));
			,
				moveto(get(view.hlookat), calc(view.vlookat-%2));
			);
		,
			set(vlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveDown">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(sceneisfull360 == false AND calc(view.vlookat+%2) GT view.vlookatmax,
				moveto(get(view.hlookat), get(view.vlookatmax));
			,
				moveto(get(view.hlookat), calc(view.vlookat+%2));
			);
		,
			set(vlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveLeft">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat-%2) LT view.hlookatmin,
				moveto(get(view.hlookatmin), get(view.vlookat));
			,
				moveto(calc(view.hlookat-%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveHoriStop());
		);
	,
		set(hlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveRight">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat+%2) GT view.hlookatmax,
				moveto(get(view.hlookatmax), get(view.vlookat));
			,
				moveto(calc(view.hlookat+%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveHoriStop());
			
		);
	,
		set(hlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveHoriStop">
	set(hlookat_moveforce, 0);
</action>
<action name="viewControlMoveVertStop">
	set(vlookat_moveforce, 0);
</action>

<action name="viewControlZoomIn">
	if(%1,
		if(%2,
			if(%2 LT view.fovmin,
				zoomto(get(view.fovmin));
			,
				if(%2 LT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, -1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, -1);
	);
</action>
<action name="viewControlZoomOut">
	if(%1,
		if(%2,
			if(%2 GT view.fovmax,
				zoomto(get(view.fovmax));
			,
				if(%2 GT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, +1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, +1);
	);
</action>
<action name="viewControlZoomStop">
	set(fov_moveforce, 0);
</action>

  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


  <!-- Sounds Management -->
  <plugin name="soundinterface"
          preload="true"
          url="%SWFPATH%/graphics/soundinterface.swf"
          alturl="%FIRSTXML%/graphics/soundinterface.js"
          rootpath="%$videos_sounds_path%/sounds"
          backgroundsound=""
          backgroundsoundloops="0"
          bgsound="false"
          bgsoundpaused="false"
          bgsoundloopended="false"
          volumeinitialized="false"
          started="true"
          keep="true"/>
  <events name="soundmanagementevents"
          onnewpano="if(plugin[soundinterface].started,playbackgroundsound(););"
          onxmlcomplete="soundinterfaceonxmlcomplete();"
          keep="true"/>
  <action name="soundinterfaceonxmlcomplete">
    ifnot(plugin[soundinterface].volumeinitialized,
      div(plugin[soundinterface].volume, tour_soundsvolume, 100);
      set(plugin[soundinterface].volumeinitialized,true);
    );
  </action>
  <action name="playsound3Dwhenpossible">
    set(really_play_sound, true);
    if (tour_current_played_sound,
      if (%1 == tour_current_played_sound,
        delete(tour_current_played_sound);
        set(tour_current_played_sound_state, 0);
        delete(tour_current_played_sound_paused);
        stopsound(%1);
        set(really_play_sound, false);
        if(%4,
          delete(tour_current_played_sound_pausesound);
          resumeTourSoundsActions(true,true,true,true,true);
        );
      );
    );
    if (really_play_sound,
      if (tour_current_played_sound,
        stopsound(get(tour_current_played_sound));

        ifnot(%4,
          if(tour_current_played_sound_pausesound,
            delete(tour_current_played_sound_pausesound);
            resumeTourSoundsActions(true,true,true,true,true);
          );
        );
      );
      if(%4,
        set(tour_current_played_sound_pausesound, true);
        pauseTourSoundsActions(true,false,true,true,true);
      );
      set(tour_current_played_sound, %1);
      if(tour_current_played_video,
        set(tour_current_played_sound_state, 2);
      ,
        set(tour_current_played_sound_state, 1);
      );
      set(tour_current_played_sound_paused, false);
      if (%3,
        if (device.flash,
          div(volume, tour_soundsvolume, 100);
          if(%9 != null,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8);
          );
        ,
          if(%9 != null,
            playsound(%1,%2,%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound(%1,%2,%8);
          );
        );
      ,
        if(%6 != null,
          playsound(%1,%2,%5,stopsound3Dwhenpossible(%1,%4));
        ,
          playsound(%1,%2,%5);
        );
      );

      ifnot(tour_soundson,
        set(tour_current_played_sound_paused, true);
        pausesound(%1);
      );
    );
  </action>
  <action name="stopsound3Dwhenpossible">
    if (%1 == tour_current_played_sound,
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
      delete(tour_current_played_sound_paused);

      ifnot(device.safari,
        stopsound(%1);
      );
      if(%2,
        delete(tour_current_played_sound_pausesound);
        resumeTourSoundsActions(true,true,true,true,true);
      );
    );
  </action>
  <action name="playbackgroundsound">
  if(playsound,
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound,
        if (plugin[soundinterface].backgroundsound != scene[get(xml.scene)].backgroundsound,
          copy(plugin[soundinterface].backgroundsound, scene[get(xml.scene)].backgroundsound);
          copy(plugin[soundinterface].backgroundsoundloops, scene[get(xml.scene)].backgroundsoundloops);
          if (tour_soundson,
            set(plugin[soundinterface].bgsound, true);
            set(plugin[soundinterface].bgsoundpaused, false);
            set(plugin[soundinterface].bgsoundloopended, false);
            if(plugin[soundinterface].backgroundsoundloops GT 0,
              playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
            ,
              playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
            );
           ,
            set(plugin[soundinterface].bgsound, false);
          );
        ,
          if (tour_soundson,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            );
          ,
            set(plugin[soundinterface].bgsound, false);
          );
        );
      );
    );
  ,
    delayedcall(0.2, playbackgroundsound());
  );
  </action>
  <action name="stopbackgroundsoundoncomplete">
    if (plugin[soundinterface].backgroundsound,
    if (plugin[soundinterface].backgroundsoundloops GT 0,

      set(plugin[soundinterface].backgroundsoundloops, 0);
      set(plugin[soundinterface].bgsound, false);
      set(plugin[soundinterface].bgsoundpaused, false);
      set(plugin[soundinterface].bgsoundloopended, true);
    );
    );
  </action>
  <action name="resetbackgroundsoundifneeded">
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound != scene[%1].backgroundsound,
        if(plugin[soundinterface].backgroundsound,
          stopsound(bgsoundname);
        );
        set(plugin[soundinterface].backgroundsound, "");
        set(plugin[soundinterface].backgroundsoundloops, 0);
        set(plugin[soundinterface].bgsound, false);
        set(plugin[soundinterface].bgsoundpaused, false);
        set(plugin[soundinterface].bgsoundloopended, false);
      );
    );
  </action>
  <action name="pausebackgroundsound">
    if(plugin[soundinterface].backgroundsound,
      if (plugin[soundinterface].bgsound,
        if(plugin[soundinterface].bgsoundpaused == false AND plugin[soundinterface].bgsoundloopended == false,
          pausesound(bgsoundname);
          set(plugin[soundinterface].bgsoundpaused, true);
        );
      );
    );
    
  </action>
  <action name="resumebackgroundsound">
    set(bgSoundOnResume, true);
    set(forceBgSoundOnResume, true);
    if(layer[displayedStandardVideo],
    if(layer[displayedStandardVideo].pausebgsound AND tour_current_played_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(layer[webvideodisplay_player],
    if(layer[webvideodisplay_player].pausebgsound AND tour_current_played_web_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(tour_current_played_sound_pausesound AND tour_current_played_sound,
      set(bgSoundOnResume, false);
    );
    ifnot(plugin[soundinterface].backgroundsound AND scene[get(xml.scene)].backgroundsound,
      set(bgSoundOnResume, false);
    );
    if(videospots_playing GT 0,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    );
    if(bgSoundOnResume,
      if (plugin[soundinterface].backgroundsound,
        if (tour_soundson,
          if (plugin[soundinterface].bgsound AND plugin[soundinterface].bgsoundloopended == false,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            );
          ,
            set(plugin[soundinterface].bgsound, true);
            set(plugin[soundinterface].bgsoundpaused, false);
            set(plugin[soundinterface].bgsoundloopended, false);
            if(plugin[soundinterface].backgroundsoundloops GT 0,
              playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
            ,
              playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
            );
          );
        );
      );
      
    ,
      if(forceBgSoundOnResume,
        playbackgroundsound();
        
      );
    );
  </action>
  <action name="preloadSounds">
    preloadsound("travel_inspiration_music_-_inspiration__background_music_royalty-free_audiojungle.mp3");
  </action>

  <action name="play3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, playpanolocalsounds();););
  </action>
  <action name="stop3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, stoppanolocalsounds();););
  </action>
  <action name="resume3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, 
      set(kill3dSoundOnResume, true);
      if(layer[displayedStandardVideo],
      if(layer[displayedStandardVideo].pausebgsound,
      if(tour_current_played_video,
        set(kill3dSoundOnResume, false);
      );););
      if(layer[webvideodisplay_player],
      if(layer[webvideodisplay_player].pausebgsound,
      if(tour_current_played_web_video,
        set(kill3dSoundOnResume, false);
      );););
      if(tour_current_played_sound_pausesound,
      if(tour_current_played_sound,
        set(kill3dSoundOnResume, false);
      ););
      if(kill3dSoundOnResume,
        resumepanolocalsounds();
      );
    ););
  </action>
  <action name="pause3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, pausepanolocalsounds();););
  </action>
  <action name="set3DLocalSoundsVolume">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, setpanolocalsoundsvolume();););
  </action>
  <action name="playTourSounds">
    set(tour_soundson, true);events.dispatch(playtoursoundsevent);
    resumeTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="stopTourSounds">
    set(tour_soundson, false);events.dispatch(stoptoursoundsevent);
    pauseTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="setTourSoundsVolume">
    set(tour_soundsvolume, %1);events.dispatch(changetoursoundsevent);
    div(volume, tour_soundsvolume, 100);
    set(plugin[soundinterface].volume, get(volume));
    set3DLocalSoundsVolume();
  </action>
  <action name="playTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        play3DLocalSounds();
        );
      );
    );
    if(%2,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
          resumebackgroundsound();
        );
      );
    );
  </action>
  <action name="stopTourSoundsActions">
    if(%1,
      stop3DLocalSounds();
    );
    if(%2,
      stopSoundActionsSounds();
    );
    if(%3,
      stopVideoActionsSounds();
    );
    if(%4,
      pausebackgroundsound();
    );
  </action>
  <action name="resumeTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        resume3DLocalSounds();
        );
      );
    );
    if(%2,
      resumeSoundActionsSounds();
    );
    if(%3,
      resumeVideoActionsSounds();
    );
    if(%4,
      if(%5,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      ,
        pausebackgroundsound();
      );
    );
  </action>
  <action name="pauseTourSoundsActions">
    if(%1,
      pause3DLocalSounds();
    );
    if(%2,
      pauseSoundActionsSounds();
    );
    if(%3,
      pauseVideoActionsSounds();
    );
    if(%4,
      if(%5,
        pausebackgroundsound();
      ,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      );
    );
  </action>
  <action name="stopSoundActionsSounds">
    if (tour_current_played_sound,
      delete(tour_current_played_sound_paused);
      stopsound(get(tour_current_played_sound));
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
    );
  </action>
  <action name="stopVideoActionsSounds">
    if(tour_current_played_video,
      if(layer[displayedStandardVideo],
        layer[displayedStandardVideo].stop();
        removelayer(displayedStandardVideo);
        if(layer[displayedStandardVideoOverlayButton], removelayer(displayedStandardVideoOverlayButton); );
        if(layer[displayedStandardVideoOverlay], removelayer(displayedStandardVideoOverlay); );
        delete(tour_current_played_video);
        set(tour_current_played_video_state, 0);
      );
    );
    if(tour_current_played_web_video,
      displayWebVideoObjectClose();
    );
  </action>
  <action name="resumeSoundActionsSounds">
    if (tour_current_played_sound,
      set(resumeSoundActionsVerification, true);
      if(tour_current_played_video,
        if(tour_current_played_sound_state LT tour_current_played_video_state,
          set(resumeSoundActionsVerification, false);
        );
      );
      if(resumeSoundActionsVerification,
        if (tour_soundson,
          if(tour_current_played_sound_paused,
            set(tour_current_played_sound_paused, false);
            resumesound(get(tour_current_played_sound));
          );
        );
      );
    );
  </action>
  <action name="resumeVideoActionsSounds">
    if(tour_current_played_video,
      set(resumeVideoActionsVerification, true);
      if(tour_current_played_sound,
        if(tour_current_played_video_state LT tour_current_played_sound_state,
          set(resumeVideoActionsVerification, false);
        );
      );
      if(resumeVideoActionsVerification,
        if (tour_soundson,
          div(volume, tour_soundsvolume, 100);
          if(device.flash OR (device.webgl AND !device.ios),
            set(layer[displayedStandardVideo].volume, get(volume));
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.startVideosSounds(get(volume)));
            );
          );
        ,
          if(device.flash OR (device.webgl AND !device.ios),
            set(layer[displayedStandardVideo].volume, 0);
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.stopVideosSounds());
            );
          );
        );
      );
    );
  </action>
  <action name="pauseSoundActionsSounds">
    if (tour_current_played_sound,
      ifnot(tour_current_played_sound_paused,
        set(tour_current_played_sound_paused, true);
        pausesound(get(tour_current_played_sound));
      );
    );
  </action>
  <action name="pauseVideoActionsSounds">
    if(tour_current_played_video,
      if(device.flash OR (device.webgl AND !device.ios),
        set(layer[displayedStandardVideo].volume, 0);
      ,
        ifnot(device.ios,
          js(kpanotour.Sounds.stopVideosSounds());
        );
      );
    );
  </action>

	<!-- WebVR plugin for VR availability tests -->

	<plugin name="ptpvrmode" devices="html5" keep="true"
		url="%FIRSTXML%/graphics/webvr.js"
		mobilevr_support="true"
		mobilevr_fake_support="false"
		vr_cursor=""
		vr_cursor_enabled="false"
		onavailable="delayedcall(1, checkVrAvailability(););"
		onunavailable="checkVrUnavailable();"
		/>
	<action name="checkVrAvailability">
		if(plugin[ptpvrmode],
			if (plugin[ptpvrmode].isavailable,
				set(tour_vrdevices, true);
				events.dispatch(onvravailable);
			,
				set(tour_vrdevices, false);
			);
		,
			checkVrUnavailable();
		);
	</action>
	<action name="checkVrUnavailable">
		set(tour_vrdevices, false);
		events.dispatch(onvrunavailable);
	</action>
  <action name="enableGyroscope">
    changeGyroscopeState(true);
  </action>
  <action name="disableGyroscope">
    changeGyroscopeState(false);
  </action>


  <!-- Share Tour -->
  <action name="shareTour">events.dispatch(onsharetour);</action>

  <!-- Hide / Show Thumbnails -->
  <action name="hideTourThumbnails">set(tour_displaythumbnails, false);events.dispatch(hidetourthumbnails);</action>
  <action name="showTourThumbnails">set(tour_displaythumbnails, true); events.dispatch(showtourthumbnails);</action>


  <!-- Tour Information -->
  <action name="hideTourInfo">set(tour_displayinfo, false);events.dispatch(onhidetourinfo);</action>
  <action name="showTourInfo">set(tour_displayinfo, true); events.dispatch(onshowtourinfo);</action>


</krpano>